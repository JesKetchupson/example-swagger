// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFinishedTaskHandlerFunc turns a function with the right signature into a get finished task handler
type GetFinishedTaskHandlerFunc func(GetFinishedTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFinishedTaskHandlerFunc) Handle(params GetFinishedTaskParams) middleware.Responder {
	return fn(params)
}

// GetFinishedTaskHandler interface for that can handle valid get finished task params
type GetFinishedTaskHandler interface {
	Handle(GetFinishedTaskParams) middleware.Responder
}

// NewGetFinishedTask creates a new http.Handler for the get finished task operation
func NewGetFinishedTask(ctx *middleware.Context, handler GetFinishedTaskHandler) *GetFinishedTask {
	return &GetFinishedTask{Context: ctx, Handler: handler}
}

/*GetFinishedTask swagger:route GET /task/{taskId}/finished getFinishedTask

getFinishedTask

1. Ищет в БД текущее состояние задачи.
2. Если статус не `finished`, то
   1. Ждет, когда задача завершится
      * регулярно проверяя состояние задачи
      * не ожидая дольше 5 минут
   2. Отправляет клиенту состояние задачи
3. Иначе возвращает текущее состояние задачи


*/
type GetFinishedTask struct {
	Context *middleware.Context
	Handler GetFinishedTaskHandler
}

func (o *GetFinishedTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFinishedTaskParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
