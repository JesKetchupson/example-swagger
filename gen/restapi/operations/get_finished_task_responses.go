// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gen/models"
)

// GetFinishedTaskOKCode is the HTTP code returned for type GetFinishedTaskOK
const GetFinishedTaskOKCode int = 200

/*GetFinishedTaskOK Состояние задачи

swagger:response getFinishedTaskOK
*/
type GetFinishedTaskOK struct {

	/*
	  In: Body
	*/
	Payload *models.TaskStatus `json:"body,omitempty"`
}

// NewGetFinishedTaskOK creates GetFinishedTaskOK with default headers values
func NewGetFinishedTaskOK() *GetFinishedTaskOK {

	return &GetFinishedTaskOK{}
}

// WithPayload adds the payload to the get finished task o k response
func (o *GetFinishedTaskOK) WithPayload(payload *models.TaskStatus) *GetFinishedTaskOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get finished task o k response
func (o *GetFinishedTaskOK) SetPayload(payload *models.TaskStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFinishedTaskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFinishedTaskBadRequestCode is the HTTP code returned for type GetFinishedTaskBadRequest
const GetFinishedTaskBadRequestCode int = 400

/*GetFinishedTaskBadRequest Передан не UUID

swagger:response getFinishedTaskBadRequest
*/
type GetFinishedTaskBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetFinishedTaskBadRequest creates GetFinishedTaskBadRequest with default headers values
func NewGetFinishedTaskBadRequest() *GetFinishedTaskBadRequest {

	return &GetFinishedTaskBadRequest{}
}

// WithPayload adds the payload to the get finished task bad request response
func (o *GetFinishedTaskBadRequest) WithPayload(payload interface{}) *GetFinishedTaskBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get finished task bad request response
func (o *GetFinishedTaskBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFinishedTaskBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFinishedTaskNotFoundCode is the HTTP code returned for type GetFinishedTaskNotFound
const GetFinishedTaskNotFoundCode int = 404

/*GetFinishedTaskNotFound Задача с {taskId} не найдена

swagger:response getFinishedTaskNotFound
*/
type GetFinishedTaskNotFound struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetFinishedTaskNotFound creates GetFinishedTaskNotFound with default headers values
func NewGetFinishedTaskNotFound() *GetFinishedTaskNotFound {

	return &GetFinishedTaskNotFound{}
}

// WithPayload adds the payload to the get finished task not found response
func (o *GetFinishedTaskNotFound) WithPayload(payload interface{}) *GetFinishedTaskNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get finished task not found response
func (o *GetFinishedTaskNotFound) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFinishedTaskNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFinishedTaskRequestTimeoutCode is the HTTP code returned for type GetFinishedTaskRequestTimeout
const GetFinishedTaskRequestTimeoutCode int = 408

/*GetFinishedTaskRequestTimeout Ожидание превысило порог в 5 минут

swagger:response getFinishedTaskRequestTimeout
*/
type GetFinishedTaskRequestTimeout struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetFinishedTaskRequestTimeout creates GetFinishedTaskRequestTimeout with default headers values
func NewGetFinishedTaskRequestTimeout() *GetFinishedTaskRequestTimeout {

	return &GetFinishedTaskRequestTimeout{}
}

// WithPayload adds the payload to the get finished task request timeout response
func (o *GetFinishedTaskRequestTimeout) WithPayload(payload interface{}) *GetFinishedTaskRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get finished task request timeout response
func (o *GetFinishedTaskRequestTimeout) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFinishedTaskRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFinishedTaskInternalServerErrorCode is the HTTP code returned for type GetFinishedTaskInternalServerError
const GetFinishedTaskInternalServerErrorCode int = 500

/*GetFinishedTaskInternalServerError Что-то пошло не так

swagger:response getFinishedTaskInternalServerError
*/
type GetFinishedTaskInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetFinishedTaskInternalServerError creates GetFinishedTaskInternalServerError with default headers values
func NewGetFinishedTaskInternalServerError() *GetFinishedTaskInternalServerError {

	return &GetFinishedTaskInternalServerError{}
}

// WithPayload adds the payload to the get finished task internal server error response
func (o *GetFinishedTaskInternalServerError) WithPayload(payload interface{}) *GetFinishedTaskInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get finished task internal server error response
func (o *GetFinishedTaskInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFinishedTaskInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
